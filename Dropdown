import React from 'react';
import {
    StyleSheet,
    Text,
    View,
    TouchableOpacity,
    Platform,
    TextInput,
    ViewPropTypes
} from 'react-native';
import PropTypes from 'prop-types';
import Icon from './Icon';
import Label from './Label';
import TextStyles from './TextStyles';
import Styles from './Styles';
import DropDownList from './DropDownList';
import * as Utils from '@utils';

class DropDownPicker extends React.Component {
    constructor(props) {
        super(props);

        let choice;
        let items = [];
        if (!props.multiple) {
            if (props.defaultValue) {
                choice = props.items.find(item => item.id === props.defaultValue.id) ?? this.null();
            } else if (props.items.filter(item => item.hasOwnProperty('selected') && item.selected === true).length > 0) {
                choice = props.items.filter(item => item.hasOwnProperty('selected') && item.selected === true)[0];
            } else {
                choice = this.null();
            }
        } else {
            if (props.defaultValue && Array.isArray(props.defaultValue) && props.defaultValue.length > 0) {
                props.defaultValue.forEach((value, index) => {
                    items.push(
                        props.items.find(item => item.id === value)
                    )
                });
            } else if (props.items.filter(item => item.hasOwnProperty('selected') && item.selected === true).length > 0) {
                items = props.items.filter((item, index) => item.hasOwnProperty('selected') && item.selected === true);
            }
        }

        this.state = {
            choice: props.multiple ? items : {
                value: choice.value,
                id: choice.id,
            },
            searchableText: null,
            isVisible: props.isVisible,
            props: {
                multiple: props.multiple,
                defaultValue: props.defaultValue,
                isVisible: props.isVisible
            }
        };
        this.select = this.select.bind(this);
    }

    static getDerivedStateFromProps(props, state) {
        // Change default value (! multiple)
        if (!state.props.multiple && props.defaultValue !== state.props.defaultValue) {
            const { label, value, icon } = props.defaultValue === null ? {
                value: null,
                id: null,
            } : props.items.find(item => item.id === props.defaultValue.id);
            return {
                choice: {
                    value, id, icon
                },
                props: {
                    ...state.props,
                    defaultValue: props.defaultValue
                }
            }
        }

        // Change default value (multiple)
        if (state.props.multiple && JSON.stringify(props.defaultValue) !== JSON.stringify(state.props.defaultValue)) {
            let items = [];
            if (props.defaultValue && Array.isArray(props.defaultValue) && props.defaultValue.length > 0) {
                props.defaultValue.forEach((value, index) => {
                    items.push(
                        props.items.find(item => item.id === value)
                    )
                });
            }

            return {
                choice: items,
                props: {
                    ...state.props,
                    defaultValue: props.defaultValue
                }
            }
        }

        // Change visibility
        if (props.isVisible !== state.props.isVisible) {
            return {
                isVisible: props.isVisible,
                props: {
                    ...state.props,
                    isVisible: props.isVisible
                }
            }
        }

        // Change disability
        if (props.disabled !== state.props.disabled) {
            return {
                props: {
                    ...state.props,
                    disabled: props.disabled
                }
            }
        }

        return null;
    }

    null() {
        return {
            id: null,
            value: null,
        }
    }

    toggle() {
        this.setState({
            isVisible: !this.state.isVisible,
        }, () => {
            const isVisible = this.state.isVisible;

            if (isVisible) {
                this.props.onOpen();
            } else {
                this.props.onClose();
            }
        });
    }

    select(item, index) {
        const { multiple } = this.state.props;
        if (!multiple) {
            this.setState({
                choice: {
                    value: item.value,
                    id: item.id,
                },
                isVisible: false,
                props: {
                    ...this.state.props,
                    isVisible: false
                }
            });

            // onChangeItem callback
            this.props.onChangeItem(item, index);
        } else {
            let choice = [...this.state.choice];
            const exists = choice.findIndex(i => i.value === item.value && i.id === item.id);

            if (exists > -1 && choice.length > this.props.min) {
                choice = choice.filter(i => i.value !== item.value && i.id !== item.id);
            } else if (exists === -1 && choice.length < this.props.max) {
                choice.push(item);
            }

            this.setState({
                choice
            });

            // onChangeItem callback
            this.props.onChangeItem(choice.map(i => i.id));
        }

        // onClose callback (! multiple)
        if (!multiple)
            this.props.onClose();
    }

    getLayout(layout) {
        this.setState({
            top: layout.height - 1
        });
    }

    getItems() {
        if (this.state.searchableText) {
            const text = this.state.searchableText.toLowerCase();

            return this.props.items.filter((item) => {
                return item.value && (item.value.toLowerCase()).indexOf(text) > -1;
            });
        }

        return this.props.items;
    }

    getNumberOfItems() {
        return this.props.multipleText.replace('%d', this.state.choice.length);
    }

    _renderSearchView(searchableText, searchablePlaceholder) {
        return (
            <View style={{ width: '100%', flexDirection: 'row' }}>
                <TextInput
                    style={[styles.input]}
                    defaultValue={searchableText}
                    placeholder={searchablePlaceholder}
                    placeholderTextColor={Utils.Color.subText}
                    onChangeText={(text) => {
                        this.setState({
                            searchableText: text
                        })
                    }}
                />
            </View>
        )
    }
    _renderExpandView(items, choice, isVisible, top, zIndex, dropDownMaxHeight, searchable, searchableText, searchablePlaceholder) {
        return(
            <View style={[
                styles.dropDown,
                styles.dropDownBox,
                !isVisible && styles.hidden,
                {
                    top: top,
                    maxHeight: dropDownMaxHeight,
                    zIndex: zIndex
                }
            ]}>
                {searchable && this._renderSearchView(searchableText, searchablePlaceholder)}
                <DropDownList items={items} {...this.props} choice={choice} select={this.select} />
            </View>
        )
    }

    _renderCollapseView(style,multiple, disabled, isVisible, choice, placeholderStyle, label, showArrow, opacity) {
        return (
            <TouchableOpacity
                onLayout={(event) => this.getLayout(event.nativeEvent.layout)}
                disabled={disabled}
                onPress={() => this.toggle()}
                activeOpacity={0.8}
                style={[
                    styles.dropDown,
                    style,
                    isVisible && styles.noBottomRadius, {
                        flexDirection: 'row', flex: 1
                    }
                ]}
            >
                <View style={[styles.dropDownDisplay]}>
                    {choice.icon && !multiple && choice.icon()}
                    <Label
                        style={[
                            TextStyles.mainB,
                            placeholderStyle,
                            { opacity, flex: 1, marginRight: 5 },
                            choice.icon && { marginLeft: 5 }
                        ]}
                        children={label}
                    />
                </View>
                {showArrow && (
                    <View style={[styles.arrow]}>
                        <View style={{ opacity }}>
                            {!isVisible ? (this.props.customArrowDown()) : (this.props.customArrowUp())}
                        </View>
                    </View>
                )}
            </TouchableOpacity>)
    }

    render() {
        const { multiple, disabled } = this.state.props;
        const { choice, isVisible, top } = this.state
        const { style, placeholder, zIndex, showArrow, searchable, dropDownMaxHeight, searchablePlaceholder, searchableText } = this.props;
        const isPlaceholderActive = choice.value === null;
        const label = isPlaceholderActive ? (placeholder) : choice.value;
        const placeholderStyle = isPlaceholderActive && styles.placeholderStyle;
        const opacity = disabled ? 0.5 : 1;
        const items = this.getItems();

        return (
            <View style={styles.containerStyle}>
                {this._renderCollapseView(style,multiple, disabled, isVisible, choice, placeholderStyle, label, showArrow, opacity)}
                {this. _renderExpandView(items, choice, isVisible, top, zIndex, dropDownMaxHeight, searchable, searchableText, searchablePlaceholder)}
            </View>
        );
    }
}

DropDownPicker.defaultProps = {
    placeholder: 'Select an item',
    dropDownMaxHeight: 150,
    style: {},
    itemStyle: {},
    labelStyle: {},
    placeholderStyle: {},
    activeItemStyle: {},
    activeLabelStyle: {},
    arrowColor: '#000',
    showArrow: true,
    arrowSize: 15,
    customArrowUp: () => <Icon size={30} source={Utils.Image.iconDropdown} />,
    customArrowDown: () => <Icon size={30} source={Utils.Image.iconDropdown} />,
    customTickIcon: () => <Icon size={30} source={Utils.Image.iconTickBlue} />,
    zIndex: 5000,
    disabled: false,
    searchable: false,
    searchablePlaceholder: 'Search for an item',
    searchableError: () => <Label style={[TextStyles.sub]}>Not Found</Label>,
    isVisible: false,
    multiple: false,
    multipleText: '%d items have been selected',
    min: 0,
    max: 10000000,
    labelLength: 1000,
    onOpen: () => { },
    onClose: () => { },
    onChangeItem: () => { },
};

DropDownPicker.propTypes = {
    items: PropTypes.array.isRequired,
    defaultValue: PropTypes.any,
    placeholder: PropTypes.string,
    dropDownMaxHeight: PropTypes.number,
    style: ViewPropTypes.style,
    itemStyle: ViewPropTypes.style,
    labelStyle: Text.propTypes.style,
    placeholderStyle: Text.propTypes.style,
    activeItemStyle: ViewPropTypes.style,
    activeLabelStyle: Text.propTypes.style,
    showArrow: PropTypes.bool,
    arrowColor: PropTypes.string,
    arrowSize: PropTypes.number,
    customArrowUp: PropTypes.func,
    customArrowDown: PropTypes.func,
    customTickIcon: PropTypes.func,
    zIndex: PropTypes.number,
    disabled: PropTypes.bool,
    searchable: PropTypes.bool,
    searchablePlaceholder: PropTypes.string,
    searchableError: PropTypes.func,
    isVisible: PropTypes.bool,
    multiple: PropTypes.bool,
    multipleText: PropTypes.string,
    min: PropTypes.number,
    max: PropTypes.number,
    labelLength: PropTypes.number,
    scrollViewProps: PropTypes.object,
    onOpen: PropTypes.func,
    onClose: PropTypes.func,
    onChangeItem: PropTypes.func
};

const styles = StyleSheet.create({
    arrow: {
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        paddingVertical: 8,
        borderTopLeftRadius: 0,
        borderBottomLeftRadius: 0,
    },
    dropDown: {
        paddingHorizontal: 10,
        paddingVertical: 5,
        backgroundColor: '#fff',
        borderTopRightRadius: 5,
        borderTopLeftRadius: 5,
        borderBottomRightRadius: 5,
        borderBottomLeftRadius: 5,
        borderWidth: 1,
        borderColor: '#dfdfdf',
    },
    dropDownDisplay: {
        flexDirection: 'row',
        alignItems: 'center',
        borderTopRightRadius: 0,
        borderBottomRightRadius: 0,
        flexGrow: 1
    },
    dropDownBox: {
        borderTopLeftRadius: 0,
        borderTopRightRadius: 0,
        alignItems: 'center',
        justifyContent: 'center',
        position: 'absolute',
        width: '100%'
    },
    dropDownItem: {
        paddingVertical: 8,
        width: '100%',
        justifyContent: 'flex-start'
    },
    input: {
        ...Styles.text_input_view,
        // flex: 1,
        // borderColor: '#dfdfdf',
        // borderBottomWidth: 1,
        // paddingHorizontal: 0,
        // paddingVertical: 8,
        // marginBottom: 10,
    },
    hidden: {
        position: 'relative',
        display: 'none',
        borderWidth: 0
    },
    noBottomRadius: {
        borderBottomLeftRadius: 0,
        borderBottomRightRadius: 0,
    },
    notFound: {
        marginVertical: 10,
        marginBottom: 15,
        alignItems: 'center'
    },
    placeholderStyle: {
        ...TextStyles.sub
    },
    containerStyle: {
        height: 44,
        ...(Platform.OS !== 'android' && {
            zIndex: zIndex
        })
    }
});

export default DropDownPicker;
